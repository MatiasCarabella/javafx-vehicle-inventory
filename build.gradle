plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'com.diffplug.spotless' version '8.0.0'
    id 'com.github.ben-manes.versions' version '0.53.0'
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml']
}

group 'com.vehicleapp'
version '1.0-SNAPSHOT'

ext {
    h2Version = '2.4.240'
    lombokVersion = '1.18.42'
    junitJupiterVersion = '6.0.0'
    googleJavaFormatVersion = '1.25.0'
    guiceVersion = '7.0.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

dependencies {
    // H2 Database
    implementation "com.h2database:h2:${h2Version}"
    
    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    
    // Dependencies will be managed by the JavaFX plugin
    
    // JUnit Jupiter for testing
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    
    // For testing with Lombok
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    
        // Guice for dependency injection
        implementation "com.google.inject:guice:${guiceVersion}"
}

test {
    useJUnitPlatform()
}

application {
    mainClass = 'com.vehicleapp.Main'
    applicationDefaultJvmArgs = [
        '--module-path', 'APP_HOME_MARKER/lib',
        '--add-modules', 'javafx.controls,javafx.fxml'
    ]
}

run {
    jvmArgs = [
        '--module-path', classpath.asPath,
        '--add-modules', 'javafx.controls,javafx.fxml'
    ]
}

// Configure the distribution
distributions {
    main {
        contents {
            into('db') {
                from('vehicledb.mv.db') {
                    // Include if exists, don't fail if missing
                    includeEmptyDirs = true
                }
            }
        }
    }
}

// Modify the start scripts to use the correct module path
tasks.withType(CreateStartScripts).configureEach { task ->
    task.doLast {
        def windowsScriptFile = new File(task.outputDir, task.applicationName + '.bat')
        def unixScriptFile = new File(task.outputDir, task.applicationName)
        
        String windowsContent = windowsScriptFile.text
        String unixContent = unixScriptFile.text
        
        // Replace APP_HOME_MARKER with actual app home variable
        windowsContent = windowsContent.replace('APP_HOME_MARKER', '%APP_HOME%')
        unixContent = unixContent.replace('APP_HOME_MARKER', '$APP_HOME')
        
        windowsScriptFile.text = windowsContent
        unixScriptFile.text = unixContent
    }
}

// Spotless code style/formatting configuration
spotless {
    java {
        target 'src/main/java/**/*.java', 'src/test/java/**/*.java'
        googleJavaFormat(googleJavaFormatVersion)
    }
}